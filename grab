#!/bin/bash

check_required_utilities() {
for cmd in awk find mv xargs ls rm head basename; do
  if ! command -v "$cmd" &> /dev/null; then
    printf "Error: %s is not installed.\n" "$cmd"
    return 1
  fi
done
}

# Initialize default configurations 
initialize_default_configs() {
  cat <<EOL > "$1"
# Default time limit in minutes
# Set to -1 to disable
time=3
# Default downloads directory path
downloads_dir=~/Downloads
EOL
}

# Read value from key-value pair in config
read_value_from_file() {
  awk -F '=' -v key="$2" '$1 == key { print $2 }' "$1"
}

grab() {

  local move_all_flag=false
  local list_flag=false
  local delete_flag=false
  local permissions_file="$HOME/.grab_config"

  # Init default config
  if [ ! -f "$permissions_file" ]; then
    initialize_default_configs "$permissions_file"
  fi

  # Check if the config file is readable
  if [ ! -r "$permissions_file" ]; then
    printf "Error: Configuration file %s is not readable.\n" "$permissions_file"

    return 1
  fi

  # Read and validate config values
  local time_limit_minutes=$(read_value_from_file "$permissions_file" "time")
  local default_downloads_dir=$(read_value_from_file "$permissions_file" "downloads_dir")

  if [ -z "$time_limit_minutes" ] || [ -z "$default_downloads_dir" ]; then
    printf "Error: Configuration file %s is malformed. It must contain valid 'time' and 'downloads_dir' keys.\n" "$permissions_file"

    return 1
  fi
 
  # Changed full path expansion to manual tilde expansion due to tilde read from files not expanding.
  default_downloads_dir="${default_downloads_dir/#\~/$HOME}"

  if [ ! -d "$default_downloads_dir" ]; then
  printf "Downloads directory '%s' does not exist.\n" "$default_downloads_dir"

  return 1
  fi

  local file_count=0
  local find_command

  while getopts "alxt:" opt; do
    case $opt in
      a) move_all_flag=true ;;
      l) list_flag=true ;;
      x) delete_flag=true ;;
      t) time_limit_minutes=$OPTARG ;;
      *) printf "Invalid option.\n"; return 1 ;;

    esac
  done
  shift $((OPTIND - 1))

  # Validate time limit
  if ! [[ "$time_limit_minutes" =~ ^-1$ ]] && ! [[ "$time_limit_minutes" =~ ^[0-9]+$ ]]; then
    printf "Error: Invalid time limit.\n"

    return 1
  fi

  # Prevents someone from grabbing their entire downloads folder
  if [ "$move_all_flag" = true ] &&  [[ "$time_limit_minutes" =~ ^-1$ ]]; then
    printf "Error: Cannot use 'all' flag with time '-1'.\n"

    return 1
  fi

  local destination_dir=${1:-"."}

  # Check existence & write permissions for destination directory
  if [ ! -d "$destination_dir" ]; then
    printf "Destination directory %s does not exist.\n" "$destination_dir"

    return 1
  fi

  if [ ! -w "$destination_dir" ]; then
    printf "Error: You do not have write permissions for %s.\n" "$destination_dir"

    return 1
  fi

  if [ "$destination_dir" = "." ]; then
    display_destination="current directory"
  else
    display_destination="$destination_dir"
  fi

  if [ "$delete_flag" = true ]; then
    action="Deleted"
    file_operation="rm" # Consider adding -f"
    else
    action="Moved"
    file_operation="mv"
  fi

  if [ "$time_limit_minutes" -eq -1 ]; then
    find_command=(find "$default_downloads_dir" -maxdepth 1 -type f)
  else
    find_command=(find "$default_downloads_dir" -maxdepth 1 -type f -mmin "-$time_limit_minutes")
  fi

  if [ "$move_all_flag" = true ]; then
    file_count=$("${find_command[@]}" | wc -l)
    if [ "$file_count" -gt 0 ] && [ "$delete_flag" = true ]; then
      printf "This will delete %d file(s). Are you sure? [y/N]\n" "$file_count"
      read -r confirmation
      if [[ ! $confirmation =~ ^[Yy]$ ]]; then
        printf "Operation aborted!\n"
        return 1
      fi
    fi

    while read -r file; do
      if [ "$delete_flag" = false ]; then
        $file_operation "$file" "$destination_dir"
      else
        $file_operation "$file" 
      fi
      [ "$list_flag" = true ] && printf "%s: %s\n" "$action" "$(basename "$file")"
    done < <("${find_command[@]}")
    if [ "$file_count" -eq 0 ]; then
      printf "No recent files found in Downloads directory within the last %d minutes.\n" "$time_limit_minutes"
    elif [ "$delete_flag" = false ]; then
    [ "$list_flag" = false ] && printf "%s %d file(s) to %s.\n" "$action" "$file_count" "$display_destination"
    else
     [ "$list_flag" = false ] && printf "%s %d file(s).\n" "$action" "$file_count"
    fi

  else
    # local newest_file=$( "${find_command[@]}" | xargs -I {} ls -lt "{}" | head -n 1 | awk '{for(i=9;i<=NF;++i) printf $i (i==NF?ORS:OFS)}' )
    local newest_file=$("${find_command[@]}" -print0 | xargs -0 ls -lt | head -n 1 | awk '{for(i=9;i<=NF;++i) printf $i (i==NF?ORS:OFS)}')

    if [ -z "$newest_file" ]; then
      printf "No recent files found in Downloads directory within the last %d minutes.\n" "$time_limit_minutes"

      return 0
    fi

    local newest_file_name=$(basename "$newest_file")
    if [ "$delete_flag" = false ]; then
      $file_operation "$newest_file" "$destination_dir"
      printf "%s %s to %s.\n" "$action" "$newest_file_name" "$display_destination"
    else
      $file_operation "$newest_file"
      printf "%s %s.\n" "$action" "$newest_file_name"
    fi
  fi
  return 0
}
check_required_utilities
grab "$@"